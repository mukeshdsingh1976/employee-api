name: Build Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  bucket-name: "wizers3bucket"
  folder-name: "Wizer-API-App"
  application-name: "Wizer-API"
  deployment-group-name: "wizer-api"
  PROJECT_LOCATION: "/home/runner/work/employee-api/employee-api/employee-api"
  WEBJOB_OUTPUT: 'employee-bulk-upload'

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: 
        dotnet build --no-restore
        | 
        dotnet publish -c Release --property:PublishDir=publish -r linux-x64 --self-contained true /p:UseAppHost=true
      
    - name: Test
      run: dotnet test --no-build --verbosity normal

    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y%m%d%H%M%S')"

    - name: Zip the WebJob
      run: |
        cd '${{ env.PROJECT_LOCATION }}/publish'
        zip -r '../${{ env.WEBJOB_OUTPUT }}.zip' .

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: webjob-zip-deploy
        path: '${{ env.PROJECT_LOCATION }}/${{ env.WEBJOB_OUTPUT }}.zip'

    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Upload to S3
      run: | 
        aws s3 cp ${{ env.PROJECT_LOCATION }}/${{ env.WEBJOB_OUTPUT }}.zip s3://${{ env.bucket-name }}/${{ env.folder-name }}/ 

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Build the application
        run: dotnet publish -c Release -o ./publish  -r linux-x64 --self-contained true /p:UseAppHost=true

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo rm -rf /var/www/myapp
            sudo mkdir -p /var/www/myapp
            sudo chown -R ubuntu:ubuntu /var/www/myapp
            scp -r ./publish/* ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/myapp
            sudo systemctl restart myapp.service

  release:
    name: Create Github Release
    if: contains(github.ref, 'tags/v') # works only version tagged
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo ${{ steps.create_release.outputs.upload_url }} > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt